import datetime
import unittest

import numpy as np
import omicron

from alpha.core.features import moving_average
from alpha.features.maline import MaLineFeatures
from alpha.notebook import get_bars
from tests import init_test_env, load_bars_from_file


class TestMalineFeatures(unittest.IsolatedAsyncioTestCase):
    async def asyncSetUp(self) -> None:
        init_test_env()
        await omicron.init()

    def test_feature_30(self):
        # 东方电气 2021-12-02 14：30
        bars = np.array(
            [
                (
                    datetime.datetime(2021, 11, 25, 15, 0),
                    20.09,
                    20.17,
                    19.91,
                    20.12,
                    9507300.0,
                    1.90805792e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 26, 10, 0),
                    19.9,
                    20.13,
                    19.57,
                    20.07,
                    16827500.0,
                    3.33758993e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 26, 10, 30),
                    20.08,
                    20.24,
                    19.92,
                    20.03,
                    8403800.0,
                    1.68697768e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 26, 11, 0),
                    20.02,
                    20.08,
                    19.82,
                    19.89,
                    5509400.0,
                    1.09913129e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 26, 11, 30),
                    19.89,
                    20.0,
                    19.79,
                    19.83,
                    3207800.0,
                    6.37319380e07,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 26, 13, 30),
                    19.83,
                    19.86,
                    19.68,
                    19.75,
                    3414900.0,
                    6.74744090e07,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 26, 14, 0),
                    19.76,
                    20.08,
                    19.75,
                    19.95,
                    3706500.0,
                    7.39406290e07,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 26, 14, 30),
                    19.95,
                    20.33,
                    19.94,
                    20.18,
                    8362000.0,
                    1.68712224e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 26, 15, 0),
                    20.18,
                    20.29,
                    20.08,
                    20.2,
                    8680600.0,
                    1.75219811e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 29, 10, 0),
                    19.79,
                    20.79,
                    19.7,
                    20.49,
                    24892400.0,
                    5.06885440e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 29, 10, 30),
                    20.5,
                    21.2,
                    20.5,
                    21.08,
                    19049800.0,
                    3.97954899e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 29, 11, 0),
                    21.06,
                    21.38,
                    20.88,
                    20.99,
                    11505800.0,
                    2.43259625e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 29, 11, 30),
                    21.0,
                    21.03,
                    20.82,
                    20.99,
                    6084600.0,
                    1.27321942e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 29, 13, 30),
                    21.04,
                    21.08,
                    20.66,
                    20.67,
                    6567100.0,
                    1.36808887e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 29, 14, 0),
                    20.66,
                    20.98,
                    20.64,
                    20.83,
                    5661400.0,
                    1.17826449e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 29, 14, 30),
                    20.85,
                    20.96,
                    20.72,
                    20.8,
                    3749300.0,
                    7.82021750e07,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 29, 15, 0),
                    20.8,
                    21.1,
                    20.72,
                    20.99,
                    10165200.0,
                    2.13046416e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 30, 10, 0),
                    21.0,
                    21.35,
                    20.63,
                    21.01,
                    22713700.0,
                    4.76791048e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 30, 10, 30),
                    21.01,
                    21.01,
                    20.59,
                    20.59,
                    10701200.0,
                    2.22196577e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 30, 11, 0),
                    20.58,
                    20.68,
                    20.32,
                    20.45,
                    9817500.0,
                    2.01122354e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 30, 11, 30),
                    20.48,
                    20.59,
                    20.4,
                    20.51,
                    3928700.0,
                    8.05381630e07,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 30, 13, 30),
                    20.5,
                    20.71,
                    20.4,
                    20.69,
                    5210200.0,
                    1.06916273e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 30, 14, 0),
                    20.65,
                    20.66,
                    20.44,
                    20.46,
                    3698000.0,
                    7.58906080e07,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 30, 14, 30),
                    20.46,
                    20.46,
                    20.28,
                    20.35,
                    7009000.0,
                    1.42688483e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 11, 30, 15, 0),
                    20.36,
                    20.4,
                    20.2,
                    20.4,
                    9642900.0,
                    1.95521211e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 12, 1, 10, 0),
                    20.31,
                    20.74,
                    19.95,
                    19.99,
                    15009400.0,
                    3.04349537e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 12, 1, 10, 30),
                    19.98,
                    20.58,
                    19.8,
                    20.38,
                    11198300.0,
                    2.26260578e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 12, 1, 11, 0),
                    20.4,
                    20.54,
                    20.11,
                    20.11,
                    3996300.0,
                    8.13398200e07,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 12, 1, 11, 30),
                    20.11,
                    20.21,
                    20.0,
                    20.21,
                    3360100.0,
                    6.74044350e07,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 12, 1, 13, 30),
                    20.25,
                    20.25,
                    20.04,
                    20.14,
                    2746800.0,
                    5.52960410e07,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 12, 1, 14, 0),
                    20.14,
                    20.27,
                    20.02,
                    20.18,
                    2671800.0,
                    5.38185070e07,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 12, 1, 14, 30),
                    20.19,
                    20.3,
                    20.1,
                    20.15,
                    3020600.0,
                    6.09443920e07,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 12, 1, 15, 0),
                    20.16,
                    20.3,
                    20.16,
                    20.19,
                    7700600.0,
                    1.55604793e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 12, 2, 10, 0),
                    20.19,
                    20.51,
                    20.11,
                    20.38,
                    12227800.0,
                    2.48683419e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 12, 2, 10, 30),
                    20.38,
                    20.38,
                    19.96,
                    19.96,
                    7350400.0,
                    1.47681515e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 12, 2, 11, 0),
                    19.95,
                    20.1,
                    19.85,
                    20.05,
                    5203500.0,
                    1.03642506e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 12, 2, 11, 30),
                    20.06,
                    20.94,
                    20.0,
                    20.73,
                    14559500.0,
                    2.99435414e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 12, 2, 13, 30),
                    20.72,
                    20.72,
                    20.41,
                    20.68,
                    5717700.0,
                    1.17591093e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 12, 2, 14, 0),
                    20.68,
                    21.23,
                    20.61,
                    20.97,
                    11043200.0,
                    2.31683671e08,
                    3.13,
                ),
                (
                    datetime.datetime(2021, 12, 2, 14, 30),
                    20.97,
                    20.97,
                    20.67,
                    20.78,
                    3448700.0,
                    7.17888150e07,
                    3.13,
                ),
            ],
            dtype=[
                ("frame", "O"),
                ("open", "<f4"),
                ("high", "<f4"),
                ("low", "<f4"),
                ("close", "<f4"),
                ("volume", "<f8"),
                ("amount", "<f8"),
                ("factor", "<f4"),
            ],
        )
        mf = MaLineFeatures()
        vec = mf.feature_30(bars)
        actual = mf.to_dict(vec)

        self.assertEqual(0, actual["support"])
        self.assertEqual(0.4, actual["follow_ma5"])
        self.assertAlmostEqual(0.0058, actual["dma5"], places=4)
        self.assertAlmostEqual(0.0022, actual["ddma5"], places=4)
        self.assertEqual(5, actual["cross_5x10"])

    def test_feature_60(self):
        bars = load_bars_from_file("sh.30m.20111105.200")
        mf = MaLineFeatures()
        vec = mf.feature_60(bars)
        print(mf.explain(vec))

    def test_featuer_120(self):
        bars = load_bars_from_file("sh.30m.20111105.200")
        mf = MaLineFeatures()
        vec = mf.feature_120(bars)
        print(mf.explain(vec))

    def test_trend_line(self):
        bars = np.array(
            [
                (33.01026, 30.975313, 31.075556),
                (31.526655, 29.91273, 31.145727),
                (31.396336, 30.333754, 30.423973),
                (30.423973, 28.439148, 28.46922),
                (29.622023, 28.930342, 29.100756),
                (30.173363, 29.170925, 29.68217),
                (30.454044, 29.451607, 30.063095),
                (30.674582, 28.920319, 29.25112),
                (29.321293, 28.689756, 29.221048),
                (29.66212, 28.820072, 28.900267),
                (29.050634, 28.599537, 28.629608),
                (29.170925, 28.489267, 29.080708),
                (30.363827, 28.910292, 29.692194),
                (29.64207, 29.120804, 29.160902),
                (30.033022, 29.130829, 29.541828),
                (30.043045, 29.170925, 30.012974),
                (30.313704, 29.571901, 30.05307),
                (30.46407, 29.321293, 29.351366),
                (29.401487, 28.088293, 28.318855),
                (28.499292, 27.166052, 27.196123),
                (28.23866, 27.206148, 27.93793),
                (28.53939, 27.567026, 28.128391),
                (28.689756, 27.617147, 27.677294),
                (28.108343, 27.567026, 27.777538),
                (28.328878, 27.777538, 28.268734),
                (28.589514, 28.05822, 28.088293),
                (28.559439, 27.968002, 28.46922),
                (28.840122, 28.23866, 28.76995),
                (29.020561, 28.358952, 28.76995),
                (29.411512, 28.669708, 29.150877),
                (29.411512, 28.830097, 29.321293),
                (30.25356, 29.211023, 30.223486),
                (36.268185, 30.824947, 36.268185),
                (35.195576, 33.59167, 34.88482),
                (34.4237, 32.98019, 33.22077),
                (33.66185, 32.629333, 33.16063),
                (34.353527, 32.739605, 34.33348),
                (34.183113, 33.36111, 33.78214),
                (34.93494, 33.2308, 34.3836),
                (34.85, 33.63, 34.81),
            ],
            dtype=[("high", "<f8"), ("low", "<f8"), ("close", "<f8")],
        )

        mf = MaLineFeatures()
        line_params = []
        wins = [5, 10, 20, 30]
        mas = mf.mas(bars["close"], wins)
        line_params = mf.line_params(mas, wins)

        slope, i = mf.trend_line(bars, mas, line_params)
        self.assertAlmostEqual(0.018, slope, 2)
        self.assertEqual(i, 1)

        bars = np.array(
            [
                (3486.44, 3476.63, 3486.27),
                (3486.76, 3481.74, 3482.97),
                (3483.42, 3458.03, 3461.49),
                (3465.09, 3456.92, 3462.85),
                (3464.21, 3453.27, 3454.11),
                (3464.63, 3453.93, 3464.54),
                (3470.67, 3460.79, 3470.02),
                (3471.34, 3464.13, 3471.34),
                (3475.35, 3469.6, 3473.38),
                (3479.63, 3470.64, 3479.63),
                (3480.64, 3459.32, 3468.81),
                (3472.9, 3465.45, 3472.39),
                (3486.65, 3472.49, 3484.17),
                (3490.32, 3480.28, 3486.19),
                (3488.7, 3483.08, 3488.42),
                (3492.86, 3485.81, 3491.21),
                (3495.91, 3484.54, 3484.54),
                (3485.43, 3480.37, 3482.55),
                (3475.45, 3459.06, 3464.37),
                (3464.31, 3453.84, 3458.72),
                (3459.68, 3451.37, 3454.27),
                (3457.91, 3451.16, 3456.74),
                (3457.66, 3453.32, 3454.13),
                (3454.38, 3442.2, 3446.7),
                (3456.86, 3442.21, 3452.79),
                (3454.15, 3448.12, 3450.68),
                (3456.16, 3435.31, 3440.72),
                (3440.74, 3426.63, 3428.34),
                (3429.47, 3418.81, 3420.29),
                (3422.89, 3413.99, 3422.7),
                (3431.64, 3418.76, 3426.28),
                (3426.17, 3415.46, 3416.26),
                (3419.06, 3410.53, 3415.63),
                (3417.77, 3403.9, 3412.95),
                (3423.76, 3406.77, 3408.31),
                (3422.91, 3406.4, 3422.05),
                (3425.39, 3415.81, 3415.86),
                (3416.64, 3410.83, 3412.67),
                (3413.08, 3391.46, 3395.02),
                (3399.35, 3391.24, 3395.28),
            ],
            dtype=[("high", "<f8"), ("low", "<f8"), ("close", "<f8")],
        )

        mas = mf.mas(bars["close"], wins)
        line_params = mf.line_params(mas, wins)

        slope, line = mf.trend_line(bars, mas, line_params)
        self.assertAlmostEqual(slope, -0.001, 3)
        self.assertEqual(line, 2)

    def test_bull_strike(self):
        mf = MaLineFeatures()

        mas = [2, 3, 4, 5]
        close = 4.5
        open_ = 1.9
        flags = mf.bull_strike(close, open_, mas)
        self.assertListEqual([1, 1, 1, 0], flags)

    def test_bearish_strike(self):
        mf = MaLineFeatures()

        mas = [2, 3, 4, 5]
        close = 1.9
        open_ = 4.5
        flags = mf.bearish_strike(close, open_, mas)
        self.assertListEqual([1, 1, 1, 0], flags)

    def test_support_and_supress(self):
        mf = MaLineFeatures()

        mas = [2, 3, 4, 5]
        close = 4.5
        result = mf.support_and_supress(close, mas)
        self.assertTupleEqual((2, 0.125, 3, -0.1), result)

    def test_ma5_relation(self):
        close = [0.01 * i * i - 0.2 * i for i in range(1, 20)]

        mf = MaLineFeatures()
        ma5 = moving_average(close, 5)
        mar = mf.follow_ma5(close, ma5)
        self.assertEqual(mar, 0.8)

        close = [-0.01 * i * i + 0.2 * i for i in range(1, 15)]
        ma5 = moving_average(close, 5)
        mar = mf.follow_ma5(close, ma5)
        self.assertEqual(mar, -0.3)

    def test_supress(self):
        mf = MaLineFeatures()

        # 2021年11月29日，30分钟线，不受20日（而5线或者10线）均线压制的例子
        bars = np.array(
            [
                (3594.67, 3586.11),
                (3594.71, 3593.22),
                (3595.55, 3592.72),
                (3597.69, 3597.53),
                (3598.38, 3594.77),
                (3594.8, 3588.7),
                (3591.2, 3588.97),
                (3590.07, 3589.09),
                (3593.24, 3588.43),
                (3589.32, 3581.2),
                (3586.97, 3581.55),
                (3585.65, 3585.65),
                (3591.69, 3588.73),
                (3602.65, 3599.49),
                (3600.41, 3594.48),
                (3594.97, 3592.7),
                (3597.15, 3586.39),
                (3589.56, 3583.3),
                (3586.62, 3582.1),
                (3589.56, 3589.18),
                (3591.11, 3587.13),
                (3593.28, 3591.26),
                (3591.16, 3586.58),
                (3586.88, 3584.18),
                (3576.11, 3570.42),
                (3575.71, 3569.93),
                (3571.83, 3563.71),
                (3566.87, 3566.19),
                (3566.43, 3558.48),
                (3566.74, 3564.37),
                (3570.01, 3566.74),
                (3567.06, 3564.28),
                (3552.93, 3551.8),
                (3557.15, 3554.47),
                (3560.08, 3559.29),
                (3563.35, 3562.7),
                (3563.68, 3544.79),
                (3556.35, 3554.94),
                (3555.6, 3553.28),
                (3562.7, 3562.7),
            ],
            dtype=[("high", "<f8"), ("close", "<f8")],
        )

        ma = moving_average(bars["close"], 20)
        supress = mf.supress(bars[-5:], ma, 1e-3)
        self.assertTrue(not supress)

        # 2021年11月29日，13:10, 受5分钟20周期线压制
        bars = np.array(
            [
                (3574.33, 3572.74),
                (3572.69, 3570.42),
                (3575.19, 3574.4),
                (3575.44, 3575.26),
                (3575.71, 3572.13),
                (3573.38, 3571.41),
                (3571.26, 3569.94),
                (3572.8, 3569.93),
                (3570.34, 3568.81),
                (3571.29, 3570.57),
                (3571.83, 3570.05),
                (3570.2, 3569.5),
                (3569.96, 3567.18),
                (3567.9, 3563.71),
                (3565.3, 3565.3),
                (3565.97, 3565.97),
                (3566.87, 3563.4),
                (3563.98, 3562.68),
                (3562.91, 3562.46),
                (3566.19, 3566.18),
                (3566.43, 3561.73),
                (3563.08, 3562.74),
                (3562.54, 3560.12),
                (3560.33, 3558.62),
                (3558.54, 3555.25),
                (3559.43, 3558.48),
                (3562.88, 3562.43),
                (3562.85, 3561.92),
                (3564.72, 3564.72),
                (3566.74, 3565.45),
                (3565.71, 3563.82),
                (3565.56, 3564.37),
                (3566.25, 3565.12),
                (3565.17, 3563.97),
                (3565.38, 3564.92),
                (3565.85, 3565.85),
                (3569.61, 3569.4),
                (3570.01, 3566.74),
                (3567.02, 3566.01),
                (3566.75, 3565.0),
                (3567.06, 3566.43),
                (3566.82, 3564.75),
                (3564.96, 3563.57),
                (3564.62, 3564.09),
                (3540.08, 3539.87),
                (3549.23, 3548.7),
                (3552.92, 3552.07),
                (3553.12, 3547.97),
                (3550.59, 3550.56),
                (3551.85, 3551.42),
                (3552.56, 3547.39),
                (3551.81, 3551.19),
                (3551.04, 3547.01),
                (3555.09, 3554.52),
                (3556.36, 3556.36),
                (3557.15, 3554.47),
                (3555.01, 3554.12),
                (3555.59, 3554.4),
                (3555.72, 3554.78),
                (3559.04, 3558.64),
                (3559.39, 3556.88),
                (3560.08, 3559.29),
                (3560.53, 3559.86),
                (3562.88, 3562.5),
                (3562.47, 3562.14),
                (3562.13, 3561.08),
                (3561.33, 3560.69),
                (3563.35, 3562.7),
                (3563.68, 3560.3),
                (3560.92, 3558.33),
            ],
            dtype=[("high", "<f8"), ("close", "<f8")],
        )

        ma = moving_average(bars["close"], 60)
        supress = mf.supress(bars[-5:], ma, 1e-3)
        self.assertTrue(supress)

    def test_support(self):
        # 2021年11月29日 15：00，5分钟5周期线支撑
        bars = np.array(
            [
                (3548.28, 3553.28),
                (3553.33, 3553.92),
                (3552.8, 3554.94),
                (3553.05, 3553.36),
                (3550.37, 3551.88),
                (3551.42, 3551.65),
                (3551.37, 3552.21),
                (3552.21, 3553.14),
                (3552.72, 3553.28),
                (3551.56, 3551.93),
                (3552.29, 3554.06),
                (3554.09, 3557.0),
                (3556.5, 3558.5),
                (3557.85, 3558.71),
                (3558.86, 3562.7),
            ],
            dtype=[("low", "<f8"), ("close", "<f8")],
        )

        ma = moving_average(bars["close"], 5)
        mf = MaLineFeatures()

        support = mf.support(bars[-5:], ma, 1e-3)
        self.assertTrue(support)

        # 2021年11月29日，10：30, 万顺新材受30分钟120周期线支撑
        bars = np.array(
            [
                (7.82, 7.9900002),
                (7.9499993, 8.01),
                (8.0, 8.08),
                (8.06, 8.11),
                (8.03, 8.04),
                (8.02, 8.11),
                (8.08, 8.16),
                (8.11, 8.15),
                (8.18, 8.3),
                (8.17, 8.23),
                (8.22, 8.24),
                (8.2, 8.2),
                (8.2, 8.24),
                (8.23, 8.35),
                (8.31, 8.35),
                (8.33, 8.4),
                (8.31, 8.67),
                (8.61, 8.71),
                (8.68, 8.69),
                (8.59, 8.62),
                (8.51, 8.59),
                (8.54, 8.55),
                (8.55, 8.58),
                (8.57, 8.6),
                (8.52, 8.84),
                (8.71, 8.77),
                (8.76, 8.89),
                (8.86, 8.87),
                (8.83, 8.85),
                (8.75, 8.79),
                (8.76, 8.81),
                (8.79, 8.82),
                (8.75, 8.77),
                (8.77, 8.8),
                (8.78, 8.91),
                (8.87, 8.91),
                (8.89, 8.93),
                (8.9, 9.06),
                (9.0, 9.05),
                (9.04, 9.16),
                (8.9, 8.93),
                (8.91, 8.94),
                (8.82, 8.83),
                (8.8, 8.95),
                (8.92, 8.99),
                (8.97, 9.01),
                (8.95, 8.97),
                (8.95, 8.97),
                (8.93, 9.08),
                (8.99, 9.24),
                (8.99, 8.99),
                (8.96, 9.03),
                (8.91, 8.92),
                (8.9, 8.96),
                (8.95, 9.0),
                (8.81, 8.84),
                (8.74, 8.82),
                (8.77, 8.85),
                (8.77, 8.77),
                (8.76, 8.83),
                (8.75, 8.91),
                (8.88, 8.97),
                (8.95, 8.99),
                (8.97, 9.01),
                (9.3, 9.9),
                (9.68, 9.77),
                (9.75, 9.81),
                (9.8, 9.82),
                (9.79, 9.81),
                (9.67, 9.67),
                (9.59, 9.7),
                (9.61, 9.71),
                (9.05, 9.1),
                (8.99, 9.08),
                (8.9, 9.13),
                (9.08, 9.13),
                (9.09, 9.11),
                (9.08, 9.13),
                (9.1, 9.11),
                (9.09, 9.2),
                (8.97, 9.07),
                (9.05, 9.17),
                (9.05, 9.14),
                (9.09, 9.15),
                (9.11, 9.39),
                (9.38, 9.48),
                (9.36, 9.41),
                (9.32, 9.39),
                (8.99, 8.99),
                (8.96, 9.09),
                (9.08, 9.1),
                (9.11, 9.47),
                (9.45, 9.5),
                (9.39, 9.46),
                (9.36, 9.43),
                (9.4, 9.44),
                (9.32, 9.85),
                (9.68, 9.68),
                (9.63, 9.81),
                (9.77, 9.82),
                (9.62, 9.68),
                (9.58, 9.66),
                (9.52, 9.56),
                (9.49, 9.65),
                (9.5, 9.63),
                (9.5, 9.51),
                (9.4, 9.49),
                (9.45, 9.53),
                (9.37, 9.38),
                (9.36, 9.38),
                (9.3, 9.32),
                (9.26, 9.28),
                (9.05, 9.19),
                (9.18, 9.28),
                (9.23, 9.31),
                (9.28, 9.31),
                (9.23, 9.23),
                (9.22, 9.33),
                (9.31, 9.31),
                (9.19, 9.24),
                (9.07, 9.18),
                (9.06, 9.16),
            ],
            dtype=[("low", "<f8"), ("close", "<f8")],
        )

        ma = moving_average(bars["close"], 120)
        support = mf.support(bars[-2:], ma, 3e-3)
        self.assertTrue(support)
