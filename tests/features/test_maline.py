import datetime
import unittest
import numpy as np
import omicron
from alpha.core.features import moving_average, polyfit

from alpha.features.maline import MaLineFeatures
from alpha.notebook import get_bars
from tests import init_test_env, load_bars_from_file


class TestMalineFeatures(unittest.IsolatedAsyncioTestCase):
    async def asyncSetUp(self) -> None:
        init_test_env()
        await omicron.init()

    def test_feature_30(self):
        bars = np.array(
            [
                (
                    datetime.date(2021, 7, 26),
                    7.9526806,
                    8.202451,
                    7.8927364,
                    8.132516,
                    14958453.0,
                    1.20885525e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 7, 27),
                    8.132516,
                    8.941771,
                    8.132516,
                    8.941771,
                    31496351.0,
                    2.78732613e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 7, 28),
                    8.851853,
                    8.851853,
                    8.252405,
                    8.672019,
                    36118635.0,
                    3.11047553e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 7, 29),
                    8.522157,
                    9.311431,
                    8.482194,
                    9.131597,
                    38974406.0,
                    3.49489587e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 7, 30),
                    8.961753,
                    9.491265,
                    8.871835,
                    9.491265,
                    33559266.0,
                    3.10271903e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 2),
                    9.671099,
                    10.390437,
                    9.371375,
                    9.461293,
                    37263258.0,
                    3.63654627e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 3),
                    9.491265,
                    9.751026,
                    9.011707,
                    9.141586,
                    29652905.0,
                    2.75511916e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 4),
                    9.131597,
                    9.451302,
                    9.05167,
                    9.281458,
                    17339935.0,
                    1.60502677e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 5),
                    9.331411,
                    9.341403,
                    9.011707,
                    9.101623,
                    14358138.0,
                    1.31842162e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 6),
                    9.081642,
                    9.281458,
                    9.011707,
                    9.171559,
                    13059440.0,
                    1.19514679e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 9),
                    9.161569,
                    9.411338,
                    9.081642,
                    9.101623,
                    15166900.0,
                    1.39656092e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 10),
                    9.091633,
                    9.331411,
                    9.001716,
                    9.201531,
                    15875902.0,
                    1.45908727e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 11),
                    9.161569,
                    9.321421,
                    9.041678,
                    9.241494,
                    11978781.0,
                    1.10319441e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 12),
                    9.2315035,
                    9.281458,
                    9.0716505,
                    9.141586,
                    9035685.0,
                    8.27530702e07,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 13),
                    9.141586,
                    9.681089,
                    9.101623,
                    9.55121,
                    20192812.0,
                    1.90370455e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 16),
                    9.661109,
                    9.870915,
                    9.311431,
                    9.381367,
                    14995963.0,
                    1.42102659e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 17),
                    9.311431,
                    9.970823,
                    9.18155,
                    9.581182,
                    21877618.0,
                    2.11917109e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 18),
                    9.601163,
                    10.19062,
                    9.401348,
                    10.06074,
                    22068938.0,
                    2.19524234e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 19),
                    10.06074,
                    10.17064,
                    9.790989,
                    9.950842,
                    13711884.0,
                    1.36575497e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 20),
                    9.741035,
                    9.9008875,
                    8.951761,
                    9.741035,
                    24752386.0,
                    2.32199994e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 23),
                    9.621145,
                    10.650198,
                    9.461293,
                    10.560281,
                    24729594.0,
                    2.55335643e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 24),
                    10.5403,
                    10.720133,
                    10.330493,
                    10.6002445,
                    16012993.0,
                    1.68637110e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 25),
                    10.510327,
                    10.909959,
                    10.400428,
                    10.68017,
                    13540770.0,
                    1.44966602e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 26),
                    10.660189,
                    11.259638,
                    10.5403,
                    10.92994,
                    13099951.0,
                    1.44117589e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 27),
                    11.009868,
                    11.009868,
                    10.590254,
                    10.860005,
                    10270688.0,
                    1.10381327e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 30),
                    10.710144,
                    11.899049,
                    10.470363,
                    11.819122,
                    20474008.0,
                    2.32733955e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 8, 31),
                    11.689241,
                    11.919031,
                    11.389518,
                    11.599324,
                    10273600.0,
                    1.19843246e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 9, 1),
                    11.739196,
                    11.839105,
                    10.690162,
                    10.860005,
                    14541281.0,
                    1.62130309e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 9, 2),
                    10.909959,
                    11.949002,
                    10.909959,
                    11.949002,
                    9343612.0,
                    1.10083847e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 9, 3),
                    13.1479,
                    13.1479,
                    13.1479,
                    13.1479,
                    4660542.0,
                    6.13327327e07,
                    4.62,
                ),
                (
                    datetime.date(2021, 9, 6),
                    14.466685,
                    14.466685,
                    13.597485,
                    13.907201,
                    92268670.0,
                    1.30939540e09,
                    4.62,
                ),
                (
                    datetime.date(2021, 9, 7),
                    13.437633,
                    14.886299,
                    13.028009,
                    14.117008,
                    68935595.0,
                    9.57302671e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 9, 8),
                    14.326815,
                    15.51572,
                    13.937173,
                    14.376769,
                    45164607.0,
                    6.59033575e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 9, 9),
                    14.38676,
                    14.476677,
                    13.257799,
                    13.53754,
                    30290925.0,
                    4.14629419e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 9, 10),
                    13.217834,
                    13.787311,
                    12.868157,
                    13.507569,
                    25689853.0,
                    3.42372831e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 9, 13),
                    13.497579,
                    14.856327,
                    13.497579,
                    14.856327,
                    13710877.0,
                    2.00917692e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 9, 14),
                    15.4158125,
                    16.344957,
                    14.286852,
                    16.344957,
                    52073876.0,
                    8.10465920e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 9, 15),
                    16.38492,
                    17.98345,
                    16.38492,
                    17.98345,
                    43378157.0,
                    7.54022911e08,
                    4.62,
                ),
                (
                    datetime.date(2021, 9, 16),
                    18.98253,
                    19.781794,
                    18.263193,
                    19.09243,
                    62647690.0,
                    1.20076514e09,
                    4.62,
                ),
                (
                    datetime.date(2021, 9, 17),
                    18.36,
                    21.02,
                    18.0,
                    21.02,
                    53487928.0,
                    1.08592427e09,
                    4.624252,
                ),
            ],
            dtype=[
                ("frame", "O"),
                ("open", "<f4"),
                ("high", "<f4"),
                ("low", "<f4"),
                ("close", "<f4"),
                ("volume", "<f8"),
                ("amount", "<f8"),
                ("factor", "<f4"),
            ],
        )
        mf = MaLineFeatures()
        vec = mf.feature_30(bars)
        print({k: v for k, v in zip(mf.columns_30, vec)})

    def test_feature_60(self):
        bars = load_bars_from_file("sh.30m.20111105.200")
        mf = MaLineFeatures()
        vec = mf.feature_60(bars)
        print({k: v for k, v in zip(mf.columns_60, vec)})

    def test_featuer_120(self):
        bars = load_bars_from_file("sh.30m.20111105.200")
        mf = MaLineFeatures()
        vec = mf.feature_120(bars)
        print({k: v for k, v in zip(mf.columns_60, vec)})

    def test_trend_line(self):
        bars = np.array(
            [
                (33.01026, 30.975313, 31.075556),
                (31.526655, 29.91273, 31.145727),
                (31.396336, 30.333754, 30.423973),
                (30.423973, 28.439148, 28.46922),
                (29.622023, 28.930342, 29.100756),
                (30.173363, 29.170925, 29.68217),
                (30.454044, 29.451607, 30.063095),
                (30.674582, 28.920319, 29.25112),
                (29.321293, 28.689756, 29.221048),
                (29.66212, 28.820072, 28.900267),
                (29.050634, 28.599537, 28.629608),
                (29.170925, 28.489267, 29.080708),
                (30.363827, 28.910292, 29.692194),
                (29.64207, 29.120804, 29.160902),
                (30.033022, 29.130829, 29.541828),
                (30.043045, 29.170925, 30.012974),
                (30.313704, 29.571901, 30.05307),
                (30.46407, 29.321293, 29.351366),
                (29.401487, 28.088293, 28.318855),
                (28.499292, 27.166052, 27.196123),
                (28.23866, 27.206148, 27.93793),
                (28.53939, 27.567026, 28.128391),
                (28.689756, 27.617147, 27.677294),
                (28.108343, 27.567026, 27.777538),
                (28.328878, 27.777538, 28.268734),
                (28.589514, 28.05822, 28.088293),
                (28.559439, 27.968002, 28.46922),
                (28.840122, 28.23866, 28.76995),
                (29.020561, 28.358952, 28.76995),
                (29.411512, 28.669708, 29.150877),
                (29.411512, 28.830097, 29.321293),
                (30.25356, 29.211023, 30.223486),
                (36.268185, 30.824947, 36.268185),
                (35.195576, 33.59167, 34.88482),
                (34.4237, 32.98019, 33.22077),
                (33.66185, 32.629333, 33.16063),
                (34.353527, 32.739605, 34.33348),
                (34.183113, 33.36111, 33.78214),
                (34.93494, 33.2308, 34.3836),
                (34.85, 33.63, 34.81),
            ],
            dtype=[("high", "<f8"), ("low", "<f8"), ("close", "<f8")],
        )

        mf = MaLineFeatures()
        line_params = []
        wins = [5, 10, 20, 30]
        mas = mf.mas(bars["close"], wins)
        line_params = mf.line_params(mas, wins)

        slope, i = mf.trend_line(bars, mas, line_params)
        self.assertAlmostEqual(0.018, slope, 2)
        self.assertEqual(i, 1)

        bars = np.array(
            [
                (3486.44, 3476.63, 3486.27),
                (3486.76, 3481.74, 3482.97),
                (3483.42, 3458.03, 3461.49),
                (3465.09, 3456.92, 3462.85),
                (3464.21, 3453.27, 3454.11),
                (3464.63, 3453.93, 3464.54),
                (3470.67, 3460.79, 3470.02),
                (3471.34, 3464.13, 3471.34),
                (3475.35, 3469.6, 3473.38),
                (3479.63, 3470.64, 3479.63),
                (3480.64, 3459.32, 3468.81),
                (3472.9, 3465.45, 3472.39),
                (3486.65, 3472.49, 3484.17),
                (3490.32, 3480.28, 3486.19),
                (3488.7, 3483.08, 3488.42),
                (3492.86, 3485.81, 3491.21),
                (3495.91, 3484.54, 3484.54),
                (3485.43, 3480.37, 3482.55),
                (3475.45, 3459.06, 3464.37),
                (3464.31, 3453.84, 3458.72),
                (3459.68, 3451.37, 3454.27),
                (3457.91, 3451.16, 3456.74),
                (3457.66, 3453.32, 3454.13),
                (3454.38, 3442.2, 3446.7),
                (3456.86, 3442.21, 3452.79),
                (3454.15, 3448.12, 3450.68),
                (3456.16, 3435.31, 3440.72),
                (3440.74, 3426.63, 3428.34),
                (3429.47, 3418.81, 3420.29),
                (3422.89, 3413.99, 3422.7),
                (3431.64, 3418.76, 3426.28),
                (3426.17, 3415.46, 3416.26),
                (3419.06, 3410.53, 3415.63),
                (3417.77, 3403.9, 3412.95),
                (3423.76, 3406.77, 3408.31),
                (3422.91, 3406.4, 3422.05),
                (3425.39, 3415.81, 3415.86),
                (3416.64, 3410.83, 3412.67),
                (3413.08, 3391.46, 3395.02),
                (3399.35, 3391.24, 3395.28),
            ],
            dtype=[("high", "<f8"), ("low", "<f8"), ("close", "<f8")],
        )

        mas = mf.mas(bars["close"], wins)
        line_params = mf.line_params(mas, wins)

        slope, line = mf.trend_line(bars, mas, line_params)
        self.assertAlmostEqual(slope, -0.001, 3)
        self.assertEqual(line, 2)

    def test_bull_strike(self):
        mf = MaLineFeatures()

        mas = [2, 3, 4, 5]
        close = 4.5
        open_ = 1.9
        flags = mf.bull_strike(close, open_, mas)
        self.assertListEqual([1, 1, 1, 0], flags)

    def test_bearish_strike(self):
        mf = MaLineFeatures()

        mas = [2, 3, 4, 5]
        close = 1.9
        open_ = 4.5
        flags = mf.bearish_strike(close, open_, mas)
        self.assertListEqual([1, 1, 1, 0], flags)

    def test_support_and_supress(self):
        mf = MaLineFeatures()

        mas = [2, 3, 4, 5]
        close = 4.5
        result = mf.support_and_supress(close, mas)
        self.assertTupleEqual((2, 0.125, 3, -0.1), result)
