import datetime
import unittest

import numpy as np
import omicron

from alpha.features.volume import moving_net_volume, top_volume_direction
from tests import data_dir, init_test_env


class TestVolumeFeatures(unittest.IsolatedAsyncioTestCase):
    async def asyncSetUp(self):
        init_test_env()
        await omicron.init()

    def test_volume_features(self):
        # 600163.XSHG 2021-09-02 11:30

        bars = np.array(
            [
                (5.72, 5.74, 5.5, 5.61, 6753800.0, 37871375.0, 2.352),
                (5.62, 5.6900005, 5.5899997, 5.62, 2434500.0, 13724468.0, 2.352),
                (5.63, 5.76, 5.63, 5.71, 5078400.0, 28906977.0, 2.352),
                (5.7, 5.79, 5.63, 5.79, 4571400.0, 26181890.0, 2.352),
                (5.79, 5.86, 5.75, 5.82, 4766500.0, 27690079.0, 2.352),
                (5.82, 5.83, 5.74, 5.76, 4448900.0, 25807039.0, 2.352),
                (5.76, 5.94, 5.63, 5.94, 12006400.0, 69975416.0, 2.352),
                (5.95, 6.0600004, 5.89, 6.0, 13042900.0, 78035291.0, 2.352),
                (5.99, 6.0600004, 5.98, 6.05, 5927400.0, 35724998.0, 2.352),
                (6.04, 6.15, 5.99, 6.15, 6730000.0, 40837283.0, 2.352),
            ],
            dtype=[
                ("open", "<f4"),
                ("high", "<f4"),
                ("low", "<f4"),
                ("close", "<f4"),
                ("volume", "<f8"),
                ("amount", "<f8"),
                ("factor", "<f4"),
            ],
        )

        vr = top_volume_direction(bars, n=5)
        exp = [2.1, 0]
        np.testing.assert_array_almost_equal(exp, vr, 1)

        bars["volume"][5] *= 3
        vr = top_volume_direction(bars, n=5)
        exp = [-2.8, 0.97]
        np.testing.assert_array_almost_equal(exp, vr, 1)

    async def test_top_volume_direction(self):
        bars = await get_bars("000058.XSHE", 60)
        vr = top_volume_direction(bars, n=10)
        print(vr)

    def test_moving_on_balance_vol(self):
        # 湖北宜化 2021-11-29
        bars = np.array(
            [
                (22.88, 25.08, 1.15477672e08),
                (25.22, 26.68, 1.24748921e08),
                (25.2, 25.7, 1.29210841e08),
                (26.51, 28.27, 1.17516162e08),
                (28.880001, 27.400002, 1.68249240e08),
                (28.01, 30.140001, 1.22655002e08),
                (31.330002, 30.75, 1.28316425e08),
                (30.719997, 33.83, 1.42766191e08),
                (32.8, 32.0, 1.46588873e08),
                (32.0, 32.96, 1.56908388e08),
                (32.2, 32.99, 1.38304042e08),
                (32.0, 29.69, 1.17378260e08),
                (28.399998, 28.07, 1.25448403e08),
                (28.82, 27.209997, 1.41923655e08),
                (27.209997, 24.49, 1.56014040e08),
                (24.39, 24.74, 1.05491984e08),
                (24.11, 27.209997, 1.68621231e08),
                (26.5, 28.240002, 1.78173708e08),
                (28.11, 30.289999, 1.56004511e08),
                (30.200003, 29.569998, 1.31267003e08),
                (28.190002, 26.61, 5.62990270e07),
                (23.95, 24.3, 1.47091039e08),
                (24.81, 25.96, 1.21602780e08),
                (25.55, 24.99, 1.22800646e08),
                (25.25, 25.48, 1.08002399e08),
                (25.38, 26.34, 1.16142894e08),
                (26.22, 25.46, 1.01168718e08),
                (25.0, 24.55, 8.54346660e07),
                (24.84, 24.28, 6.49755080e07),
                (23.9, 24.2, 7.79400290e07),
            ],
            dtype=[("open", "<f4"), ("close", "<f4"), ("volume", "<f8")],
        )

        win = 10
        nobv = moving_net_volume(bars, win)
        self.assertEqual(len(bars) - win + 1, len(nobv))
